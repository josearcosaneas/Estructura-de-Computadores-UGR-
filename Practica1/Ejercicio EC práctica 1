Ejercicio 4

Sesión de depuración saludo.s

1 ¿Qué contiene EDX tras ejecutar mov longsaludo, %edx? ¿Para qué necesitamos esa instrucción, o ese valor?
Responder no sólo el valor concreto (en decimal y hex) sino también el significado del mismo (¿de dónde sale?)
Comprobar que se corresponden los valores hexadecimal y decimal mostrados en la ventana Status‐>Registers

0x1c [28]. El valor lo optenemos al pasar saludo a %ecx. Necesitamos la instrucción para cargar en %edx la dirección de memoria de longsaludo


2 ¿Qué contiene ECX tras ejecutar mov $saludo, %ecx? Indicar el valor en hexadecimal, y el significado del mismo.
Realizar un dibujo a escala de la memoria del programa, indicando dónde empieza el programa (_start, .text),
dónde empieza saludo (.data), y dónde está el tope de pila (%esp)

%ecx contiene 0x8049098 (en hexadecimal) y 134516888 (en decimal)

3 ¿Qué sucede si se elimina el símbolo de dato inmediato ($) de la instrucción anterior? (mov saludo, %ecx)
Realizar la modificación, indicar el contenido de ECX en hexadecimal, explicar por qué no es lo mismo en ambos casos
Concretar de dónde viene el nuevo valor (obtenido sin usar $)

Si eliminamos el símbolo $ moveremos a %ecx la dirección de memoria de saludo y no su valor.
Tras el cambio el valor de %ecx 0x616c6f48 (en hexadecimal) y 1634496328 (en decimal).


4 ¿Cuántas posiciones de memoria ocupa ocupa la variable longsaludo? ¿Y la variable saludo? ¿Cuántos bytes ocupa por tanto la sección de datos? Comprobar con un volcado Data‐>Memory mayor que la zona de datos antes de hacer Run.

La variable longsaludo ocupa 28 posiciones de memoria, cosa que podemos comprobar sabiendo que logsaludo está definido como un entero menos lo que ocupa saludo (.-saludo). (Al ejecutar el valor del registro %edx el valor es 28).
La variable saludo ocupa "Hola a todos!\nHello, world!\n", es decir ocupa otras 28 posiciones de memoria
El volcado de memoria son 224 bytes

5 Añadir dos volcados Data‐>Memory de la variable longsaludo, uno como entero hexadecimal, y otro como 4 bytes hex.
Teniendo en cuenta lo mostrado en esos volcados… ¿Qué direcciones de memoria ocupa longsaludo? ¿Cuál byte está en  la primera posición, el más o el menos significativo? ¿Los procesadores de la línea x86 usan el criterio del extremo mayor (big‐endian) o menor (little‐endian)? Razonar la respuesta

longsaludo ocupa las direcciones de memoria 0x1c 0x00 0x00 0x00 con el volcado como entero hexadecimal.
longsaludo ocupa las direcciones de memoria 0x0000001 con el volcado como 4 bytes hexadecimal.
Los procesadores de la linea x86 usan el criterio little-endian ya que al pasar el mover el regstro a memoria lo pasa dado la vuelta.

6 ¿Cuántas posiciones de memoria ocupa la instrucción mov $1, %ebx? ¿Cómo se ha obtenido esa información? Indicar las posiciones concretas en hexadecimal.

La instrucción ocupa 5 posiciones de memoria (en decimal). Lo sabemos porque .
Las posiciones concretas son desde 0x08048079 hasta 0x0804807e

7 ¿Qué sucede si se elimina del programa la primera instrucción int 0x80? ¿Y si se elimina la segunda?
Razonar las respuestas 

El primer int 0x80 llama a write, si lo quitamos no escribe &saludo ni &longsaludo.
El segundo in 0x80 llama a exit(0), si lo quitamos no finaliza el programa.

8 ¿Cuál es el número de la llamada al sistema READ (en kernel Linux 32bits)? ¿De dónde se ha obtenido esa información?

READ es la llamada 3. Lo sabemos haciendo cat en el archivo /usr/include/asm/unistd_32.h


Ejercicio 5

Sesión de depuración suma.s


1 ¿Cuál es el contenido de EAX justo antes de ejecutar la instrucción RET, para esos componentes de lista concretos?
Razonar la respuesta, incluyendo cuánto valen 0b10, 0x10, y (.‐lista)/4

EAX vale 0x25 (en hexadecimal), 37 (en decimal), que es el resultado de la suma.


2 ¿Qué valor en hexadecimal se obtiene en resultado si se usa la lista de 3 elementos: .int 0xffffffff, 0xffffffff, 0xffffffff?
El resultado es -3.Su valor en hexadecimal es 0xfffffd.

¿Por qué es diferente del que se obtiene haciendo la suma a mano? NOTA: Indicar qué valores va tomando EAX en cada
iteración del bucle, como los muestra la ventana Status‐>Registers, en hexadecimal y decimal (con signo). Fijarse
también en si se van activando los flags CF y OF o no tras cada suma. Indicar también qué valor muestra resultado si se
vuelca con Data‐>Memory como decimal (con signo) o unsigned (sin signo).

iteracion 1 : 
resultado decimal = -1
valor hexadecimal 0xFFFFFFFF;
flags Activado : No esta activado.

iteracion 2:
resultado decimal = -2.
resultado hexadecimal = 0XFFFFFFFE.
Flags Activado : CF.

iteracion 3:
resultado decimal = -3.
resultadoo hexadecimal =0xFFFFFFFD. 
flag activados : CF.
 

3 ¿Qué dirección se le ha asignado a la etiqueta suma? ¿Y a bucle? ¿Cómo se ha obtenido esa información?

La direcion de la etiqueta suma es : 0x8048095
La direcion del bucle es: 0x80480a0.
data -> memory.

4 ¿Para qué usa el procesador los registros EIP y ESP?

EIP es el contador de programa, que señala las instrucciones del
programa.
ESP es el puntero de pila, que apunta a la misma.

5 ¿Cuál es el valor de ESP antes de ejecutar CALL, y cuál antes de ejecutar RET? ¿En cuánto se diferencian ambos valores?
¿Por qué? ¿Cuál de los dos valores de ESP apunta a algún dato de interés para nosotros? ¿Cuál es ese dato?

El valor de ESP antes de ejecutarse call es 0xbfff090
El valor de ESP antes de ejecutarse RET  es 0xbfff088
Ambos valores se diferencian en 2.Son Es donde empezo el programa a ejecutarse y acaba.
El valor de ret ya que lo utlizia para restaurarlo todo a como estaba antes.

6 ¿Qué registros modifica la instrucción CALL? Explicar por qué necesita CALL modificar esos registros

CALL modifica los registros SP e ID, ya que los necesita para llevar a
cabo la llamada a suma, que es una llamada a la subrutina.

7 ¿Qué registros modifica la instrucción RET? Explicar por qué necesita RET modificar esos registros
Necesita modificar esos registros para despues poder restaurarlo todo a su estado anterior.

RET modifica los registros IP, CS. RET es un retorno a la subrutina, para
restaurar los valores que CALL cambió.

8 Indicar qué valores se introducen en la pila durante la ejecución del programa, y en qué direcciones de memoria queda
cada uno. Realizar un dibujo de la pila con dicha información. NOTA: en los volcados Data‐>Memory se puede usar $esp
para referirse a donde apunta el registro ESP

Se introducen %ebx, %edx, %eax

9 ¿Cuántas posiciones de memoria ocupa la instrucción mov $0, %edx? ¿Y la instrucción inc %edx? ¿Cuáles son sus
respectivos códigos máquina? Indicar cómo se han obtenido. NOTA: en los volcados Data‐>Memory se puede usar una
dirección hexadecimal 0x… para indicar la dirección del volcado. Recordar la ventana View‐>Machine Code Window.
Recordar también la herramienta objdump.

Podemos, mediante un volcado de memoria y poniendo un breakpoint en la instrucción, hacer run al programa, stepi y obtener los valores.
La instrucción empieza en 0x0904809b y la siguiente en 0x080480a0, por tanto, ocupa 5.

10 ¿Qué ocurriría si se eliminara la instrucción RET? Razonar la respuesta. Comprobarlo usando ddd

Si eliminamos RET el programa no funciona, ya que sin retorno no vuelven
a los registros los valores que movió CALL, y por tanto no tiene los
valores para acabar el programa.

Ejercicio 6

Sumar N enteros sin signo de 32bits en una plataforma de 32bits sin perder precisión (N≈32)

.section .data
lista:		.int 0xffffffff, 1
longlista:	.int (.-lista)/4
resultado:	.quad -1 	#declaro para que tenga 64 bits


.section .text
_start:	.global _start

	mov    $lista, %ebx
	mov longlista, %ecx
	call suma
	mov %eax, resultado

	mov $1, %eax
	mov $0, %ebx
	int $0x80

suma: 
	push %esi              	
	mov $0, %eax  		#Inicio los acumuladores a 0
	mov $0, %edx
	mov $0, %esi
bucle:
	add (%ebx,%esi,4), %eax  #sumo el acarreo
	adc $0, %edx		 #sumo en edx el acarro si hay.
	inc       %esi
	cmp  %esi,%ecx
	jne bucle

	pop %esi
	ret

1-Para  N≈32,  ¿cuántos  bits  adicionales  pueden  llegar  a  necesitarse  para  almacenar  el  resultado?  Dicho  resultado  se 
alcanzaría cuando todos los elementos tomaran el valor máximo sin signo. ¿Cómo se escribe ese valor en hexadecimal? 
¿Cuántos acarreos se producen? ¿Cuánto vale la suma (indicarla en hexadecimal)? Comprobarlo usando ddd.

   1 bit.
   Hexadecimal: 0x1.
   Acarreos: 1
   Suma: 32+32=64bits= 2^64-1; hex = 0x20000000000000000.

2-Si nos proponemos obtener sólo 1 acarreo con una lista de 32 elementos iguales, el objetivo es que la suma alcance 32 ?
(que  ya  no  cabe  en  32bits).  Cada  elemento  debe  valer  por  tanto  2 /32  =  2 /2   =  ?.  ¿Cómo  se  escribe  ese  valor  en 
hexadecimal? Inicializar los 32 elementos de la lista con ese valor y comprobar cuándo se produce el acarreo.

   El número es 2^27. hex = 0x8000000. 
   El acarreo se produce en la última suma.

Ejercicio 7

Sumar N enteros con signo de 32bits en una plataforma de 32bits

.section .data
lista:		.int 1, -2 ,5,5,-0xfffffff,-0xfffffff,-0xfffffff
longlista:	.int (.-lista)/4
resultado:	.quad -1 	#Declaro a 64 bits


.section .text
_start:	.global _start

	mov    $lista, %ebx
	mov longlista, %ecx
	call suma

	mov %edx, resultado
	mov %eax, resultado

	mov $1, %eax
	mov $0, %ebx
	int $0x80

suma: 
	push %esi     		
	mov $0, %eax  		#acumuladores y registro a 0
	mov $0, %edx
	mov $0, %esi
	mov $0, %ebp
bucle:
		
	CDQ
	mov (%ebx,%esi,4),%ebp
	add %ebp, %edx	         	
	adc $0, %edx		 

	inc %esi

	cmp %esi,%ecx
	jne bucle

	pop %esi
	ret
	
1¿Cuál  es  el  máximo  entero  positivo  que  puede  representarse  (escribirlo  en  hexadecimal)?  Si  se  sumaran  los  N≈32 
elementos  de  la  lista  inicializados  a  ese  valor  ¿qué  resultado  se  obtendría  (en  hexadecimal)?  ¿Qué  valor  aproximado 
tienen el elemento y la suma (indicarlo en múltiplos de potencias de 10)? Comprobarlo usando ddd. 

2^64-1 = (hex) 0x20000000000000000.




	

